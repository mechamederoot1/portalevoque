#!/usr/bin/env python3
"""
Script de valida√ß√£o para verificar se as configura√ß√µes SLA est√£o funcionando corretamente
"""
import pymysql
from datetime import datetime, time
import json

# Configura√ß√µes do banco MySQL Azure
DB_CONFIG = {
    'host': 'evoque-database.mysql.database.azure.com',
    'user': 'infra',
    'password': 'Evoque12@',
    'database': 'infra',
    'port': 3306,
    'charset': 'utf8mb4'
}

def conectar_banco():
    """Conecta ao banco MySQL Azure"""
    try:
        return pymysql.connect(**DB_CONFIG)
    except Exception as e:
        print(f"‚ùå Erro ao conectar: {str(e)}")
        return None

def validar_estrutura_tabelas():
    """Valida se as tabelas t√™m a estrutura correta"""
    print("üîç Validando estrutura das tabelas...")
    
    connection = conectar_banco()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor()
        
        # Verificar tabela configuracoes_sla
        cursor.execute("DESCRIBE configuracoes_sla")
        colunas_sla = [row[0] for row in cursor.fetchall()]
        
        colunas_esperadas_sla = [
            'id', 'prioridade', 'tempo_primeira_resposta', 'tempo_resolucao',
            'considera_horario_comercial', 'considera_feriados', 'ativo',
            'data_criacao', 'data_atualizacao'
        ]
        
        print("üìä Tabela configuracoes_sla:")
        for coluna in colunas_esperadas_sla:
            if coluna in colunas_sla:
                print(f"   ‚úÖ {coluna}")
            else:
                print(f"   ‚ùå {coluna} - FALTANDO")
        
        # Verificar tabela horario_comercial
        cursor.execute("DESCRIBE horario_comercial")
        colunas_horario = [row[0] for row in cursor.fetchall()]
        
        colunas_esperadas_horario = [
            'id', 'nome', 'hora_inicio', 'hora_fim', 'segunda', 'terca',
            'quarta', 'quinta', 'sexta', 'sabado', 'domingo', 'ativo', 'padrao'
        ]
        
        print("\nüìÖ Tabela horario_comercial:")
        for coluna in colunas_esperadas_horario:
            if coluna in colunas_horario:
                print(f"   ‚úÖ {coluna}")
            else:
                print(f"   ‚ùå {coluna} - FALTANDO")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {str(e)}")
        return False
    finally:
        connection.close()

def validar_dados_padrao():
    """Valida se os dados padr√£o est√£o corretos"""
    print("\nüìù Validando dados padr√£o...")
    
    connection = conectar_banco()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor()
        
        # Verificar SLAs padr√£o
        cursor.execute("""
            SELECT prioridade, tempo_resolucao, ativo 
            FROM configuracoes_sla 
            ORDER BY 
                CASE prioridade 
                    WHEN 'Cr√≠tica' THEN 1
                    WHEN 'Urgente' THEN 2
                    WHEN 'Alta' THEN 3
                    WHEN 'Normal' THEN 4
                    WHEN 'Baixa' THEN 5
                END
        """)
        slas = cursor.fetchall()
        
        slas_esperados = {
            'Cr√≠tica': 2.0,
            'Urgente': 2.0,
            'Alta': 8.0,
            'Normal': 24.0,
            'Baixa': 72.0
        }
        
        print("üìä Valida√ß√£o SLAs:")
        for sla in slas:
            prioridade, tempo, ativo = sla
            if prioridade in slas_esperados:
                if float(tempo) == slas_esperados[prioridade] and ativo:
                    print(f"   ‚úÖ {prioridade}: {tempo}h (Ativo)")
                else:
                    print(f"   ‚ö†Ô∏è  {prioridade}: {tempo}h (Esperado: {slas_esperados[prioridade]}h, Ativo: {ativo})")
            else:
                print(f"   ‚ùì {prioridade}: {tempo}h (N√£o esperado)")
        
        # Verificar hor√°rio comercial padr√£o
        cursor.execute("""
            SELECT nome, hora_inicio, hora_fim, segunda, sexta, ativo, padrao
            FROM horario_comercial 
            WHERE padrao = TRUE
        """)
        horario = cursor.fetchone()
        
        print("\nüìÖ Valida√ß√£o Hor√°rio Comercial:")
        if horario:
            nome, inicio, fim, segunda, sexta, ativo, padrao = horario
            print(f"   ‚úÖ Nome: {nome}")
            print(f"   ‚úÖ Hor√°rio: {inicio} √†s {fim}")
            print(f"   ‚úÖ Segunda ativa: {segunda}")
            print(f"   ‚úÖ Sexta ativa: {sexta}")
            print(f"   ‚úÖ Ativo: {ativo}")
            print(f"   ‚úÖ Padr√£o: {padrao}")
        else:
            print("   ‚ùå Nenhuma configura√ß√£o padr√£o encontrada")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o de dados: {str(e)}")
        return False
    finally:
        connection.close()

def testar_queries_funcionais():
    """Testa queries que ser√£o usadas pela aplica√ß√£o"""
    print("\nüß™ Testando queries funcionais...")
    
    connection = conectar_banco()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor()
        
        # 1. Buscar SLA por prioridade
        print("üìä Teste: Buscar SLA por prioridade")
        cursor.execute("""
            SELECT tempo_resolucao, tempo_primeira_resposta 
            FROM configuracoes_sla 
            WHERE prioridade = 'Cr√≠tica' AND ativo = TRUE
        """)
        result = cursor.fetchone()
        if result:
            print(f"   ‚úÖ SLA Cr√≠tica: {result[0]}h resolu√ß√£o, {result[1]}h primeira resposta")
        else:
            print("   ‚ùå SLA Cr√≠tica n√£o encontrado")
        
        # 2. Buscar hor√°rio comercial ativo
        print("\nüìÖ Teste: Buscar hor√°rio comercial ativo")
        cursor.execute("""
            SELECT hora_inicio, hora_fim, segunda, terca, quarta, quinta, sexta
            FROM horario_comercial 
            WHERE ativo = TRUE AND padrao = TRUE
        """)
        result = cursor.fetchone()
        if result:
            inicio, fim, seg, ter, qua, qui, sex = result
            dias_ativos = sum([seg, ter, qua, qui, sex])
            print(f"   ‚úÖ Hor√°rio: {inicio} √†s {fim}")
            print(f"   ‚úÖ Dias √∫teis ativos: {dias_ativos}/5")
        else:
            print("   ‚ùå Hor√°rio comercial padr√£o n√£o encontrado")
        
        # 3. Simular c√°lculo de SLA
        print("\n‚öôÔ∏è  Teste: Simula√ß√£o de c√°lculo SLA")
        cursor.execute("""
            SELECT 
                p.prioridade,
                p.tempo_resolucao,
                p.tempo_primeira_resposta,
                h.hora_inicio,
                h.hora_fim
            FROM configuracoes_sla p
            CROSS JOIN horario_comercial h
            WHERE p.prioridade = 'Alta' 
            AND p.ativo = TRUE 
            AND h.ativo = TRUE 
            AND h.padrao = TRUE
        """)
        result = cursor.fetchone()
        if result:
            prioridade, resolucao, primeira_resp, inicio, fim = result
            print(f"   ‚úÖ Prioridade: {prioridade}")
            print(f"   ‚úÖ Tempo resolu√ß√£o: {resolucao}h")
            print(f"   ‚úÖ Tempo primeira resposta: {primeira_resp}h")
            print(f"   ‚úÖ Hor√°rio comercial: {inicio} √†s {fim}")
            print("   ‚úÖ Query de integra√ß√£o funcionando")
        else:
            print("   ‚ùå Query de integra√ß√£o falhou")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos testes funcionais: {str(e)}")
        return False
    finally:
        connection.close()

def gerar_relatorio_configuracoes():
    """Gera relat√≥rio completo das configura√ß√µes"""
    print("\nüìã RELAT√ìRIO DE CONFIGURA√á√ïES SLA")
    print("=" * 50)
    
    connection = conectar_banco()
    if not connection:
        return False
    
    try:
        cursor = connection.cursor()
        
        # Estat√≠sticas gerais
        cursor.execute("SELECT COUNT(*) FROM configuracoes_sla WHERE ativo = TRUE")
        total_slas = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM horario_comercial WHERE ativo = TRUE")
        total_horarios = cursor.fetchone()[0]
        
        print(f"üìä Configura√ß√µes SLA ativas: {total_slas}")
        print(f"üìÖ Hor√°rios comerciais ativos: {total_horarios}")
        
        # Detalhes por prioridade
        cursor.execute("""
            SELECT 
                prioridade,
                tempo_primeira_resposta,
                tempo_resolucao,
                considera_horario_comercial,
                considera_feriados
            FROM configuracoes_sla 
            WHERE ativo = TRUE
            ORDER BY 
                CASE prioridade 
                    WHEN 'Cr√≠tica' THEN 1
                    WHEN 'Urgente' THEN 2
                    WHEN 'Alta' THEN 3
                    WHEN 'Normal' THEN 4
                    WHEN 'Baixa' THEN 5
                END
        """)
        
        print("\nüìä CONFIGURA√á√ïES SLA DETALHADAS:")
        print("-" * 40)
        for row in cursor.fetchall():
            prioridade, primeira_resp, resolucao, horario_com, feriados = row
            print(f"üéØ {prioridade}:")
            print(f"   ‚è±Ô∏è  Primeira resposta: {primeira_resp}h")
            print(f"   ‚è∞ Resolu√ß√£o: {resolucao}h")
            print(f"   üïí Considera hor√°rio comercial: {'Sim' if horario_com else 'N√£o'}")
            print(f"   üóìÔ∏è  Considera feriados: {'Sim' if feriados else 'N√£o'}")
            print()
        
        # Hor√°rio comercial detalhado
        cursor.execute("""
            SELECT 
                nome, descricao, hora_inicio, hora_fim,
                segunda, terca, quarta, quinta, sexta, sabado, domingo,
                considera_almoco, almoco_inicio, almoco_fim,
                emergencia_ativo, emergencia_inicio, emergencia_fim
            FROM horario_comercial 
            WHERE ativo = TRUE AND padrao = TRUE
        """)
        
        horario = cursor.fetchone()
        if horario:
            print("üìÖ HOR√ÅRIO COMERCIAL PADR√ÉO:")
            print("-" * 40)
            nome, desc, inicio, fim, seg, ter, qua, qui, sex, sab, dom, almoco, almoco_ini, almoco_fim, emerg, emerg_ini, emerg_fim = horario
            
            print(f"üìõ Nome: {nome}")
            print(f"üìù Descri√ß√£o: {desc}")
            print(f"üïê Hor√°rio: {inicio} √†s {fim}")
            
            dias = []
            if seg: dias.append('Segunda')
            if ter: dias.append('Ter√ßa')
            if qua: dias.append('Quarta')
            if qui: dias.append('Quinta')
            if sex: dias.append('Sexta')
            if sab: dias.append('S√°bado')
            if dom: dias.append('Domingo')
            
            print(f"üìÜ Dias ativos: {', '.join(dias)}")
            
            if almoco:
                print(f"üçΩÔ∏è  Intervalo almo√ßo: {almoco_ini} √†s {almoco_fim}")
            
            if emerg:
                print(f"üö® Emerg√™ncia: {emerg_ini} √†s {emerg_fim}")
        
        print("\n‚úÖ Relat√≥rio gerado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no relat√≥rio: {str(e)}")
        return False
    finally:
        connection.close()

def main():
    """Fun√ß√£o principal de valida√ß√£o"""
    print("üîç VALIDA√á√ÉO COMPLETA - CONFIGURA√á√ïES SLA")
    print("=" * 50)
    
    success = True
    
    # 1. Validar estrutura
    if not validar_estrutura_tabelas():
        success = False
    
    # 2. Validar dados
    if not validar_dados_padrao():
        success = False
    
    # 3. Testar funcionalidades
    if not testar_queries_funcionais():
        success = False
    
    # 4. Gerar relat√≥rio
    if not gerar_relatorio_configuracoes():
        success = False
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("‚úÖ Todas as configura√ß√µes est√£o corretas")
        print("‚úÖ Sistema SLA pronto para uso")
    else:
        print("‚ùå VALIDA√á√ÉO ENCONTROU PROBLEMAS")
        print("‚ö†Ô∏è  Verifique os erros acima")
    
    return success

if __name__ == "__main__":
    main()
