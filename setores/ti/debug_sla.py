#!/usr/bin/env python3
"""
Script de debug para analisar viola√ß√µes de SLA
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', '..'))

from app import app
from database import db, Chamado, HistoricoSLA
from setores.ti.sla_utils import calcular_sla_chamado_correto, carregar_configuracoes_sla, carregar_configuracoes_horario_comercial

def debug_sla_violations():
    """Analisa viola√ß√µes de SLA em detalhes"""
    with app.app_context():
        try:
            print("üîç AN√ÅLISE DETALHADA DE VIOLA√á√ïES SLA")
            print("=" * 50)
            
            # Carregar configura√ß√µes
            config_sla = carregar_configuracoes_sla()
            config_horario = carregar_configuracoes_horario_comercial()
            
            print(f"üìã Configura√ß√µes SLA: {config_sla}")
            print(f"‚è∞ Hor√°rio comercial: {config_horario}")
            print()
            
            # Buscar chamados conclu√≠dos/cancelados
            chamados_finalizados = Chamado.query.filter(
                Chamado.status.in_(['Concluido', 'Cancelado'])
            ).order_by(Chamado.data_abertura.desc()).limit(20).all()
            
            print(f"üìä Analisando {len(chamados_finalizados)} chamados finalizados...")
            print()
            
            violacoes_encontradas = 0
            cumprimentos_encontrados = 0
            sem_data_conclusao = 0
            
            for chamado in chamados_finalizados:
                sla_info = calcular_sla_chamado_correto(chamado, config_sla, config_horario)
                
                # Verificar se tem data de conclus√£o
                if not chamado.data_conclusao:
                    sem_data_conclusao += 1
                    print(f"‚ùå Chamado {chamado.codigo}: SEM DATA DE CONCLUS√ÉO")
                    print(f"   Status: {chamado.status}, Prioridade: {chamado.prioridade}")
                    print(f"   Data abertura: {chamado.data_abertura}")
                    print()
                    continue
                
                if sla_info['sla_status'] == 'Violado':
                    violacoes_encontradas += 1
                    print(f"üö® VIOLA√á√ÉO: Chamado {chamado.codigo}")
                    print(f"   Status: {chamado.status}, Prioridade: {chamado.prioridade}")
                    print(f"   Data abertura: {chamado.data_abertura}")
                    print(f"   Data conclus√£o: {chamado.data_conclusao}")
                    print(f"   Tempo resolu√ß√£o (√∫teis): {sla_info['horas_uteis_decorridas']:.2f}h")
                    print(f"   Limite SLA: {sla_info['sla_limite']}h")
                    print(f"   Status SLA: {sla_info['sla_status']}")
                    print()
                elif sla_info['sla_status'] == 'Cumprido':
                    cumprimentos_encontrados += 1
            
            print("üìà RESUMO DA AN√ÅLISE:")
            print(f"   ‚úÖ Cumprimentos: {cumprimentos_encontrados}")
            print(f"   üö® Viola√ß√µes: {violacoes_encontradas}")
            print(f"   ‚ùå Sem data conclus√£o: {sem_data_conclusao}")
            print()
            
            # Verificar hist√≥rico de corre√ß√µes SLA
            historicos = HistoricoSLA.query.order_by(HistoricoSLA.data_criacao.desc()).limit(10).all()
            print(f"üìù √öltimas {len(historicos)} corre√ß√µes no hist√≥rico SLA:")
            for hist in historicos:
                print(f"   {hist.data_criacao.strftime('%d/%m/%Y %H:%M')} - Chamado {hist.chamado_id} - {hist.acao}")
            
            if violacoes_encontradas > 0:
                print("\n‚ö†Ô∏è  AINDA EXISTEM VIOLA√á√ïES DETECTADAS!")
                print("   Isso pode indicar que:")
                print("   1. Alguns chamados ainda n√£o t√™m data de conclus√£o")
                print("   2. Algumas datas de conclus√£o s√£o posteriores ao limite SLA")
                print("   3. O cache do frontend precisa ser limpo")
            else:
                print("\nüéâ TODAS AS VIOLA√á√ïES FORAM CORRIGIDAS!")
                
        except Exception as e:
            print(f"‚ùå Erro durante anÔøΩÔøΩlise: {str(e)}")
            import traceback
            traceback.print_exc()

if __name__ == '__main__':
    debug_sla_violations()
